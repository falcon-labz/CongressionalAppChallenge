// This Is the code for care compass as the API's used in Safe Route aspect of Safe Haven didn't load into Github, email me for that code
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>CareCompass — Health, Wellness & Medication Support</title>
  <meta name="description" content="CareCompass helps users track mood, meds, habits, and access community resources — privacy-first, accessible, and offline-ready." />
  <style>
    :root {
      --bg: #0f172a;           /* slate-900 */
      --panel: #111827;        /* gray-900 */
      --soft: #1f2937;         /* gray-800 */
      --muted: #9ca3af;        /* gray-400 */
      --text: #f8fafc;         /* slate-50 */
      --brand: #22d3ee;        /* cyan-400 */
      --brand-2: #a78bfa;      /* violet-400 */
      --ok: #34d399;           /* green-400 */
      --warn: #fbbf24;         /* amber-400 */
      --danger: #fb7185;       /* rose-400 */
      --shadow: 0 20px 40px rgba(0,0,0,.35);
      --radius: 18px;
    }
    [data-theme="light"] {
      --bg: #f8fafc;          /* slate-50 */
      --panel: #ffffff;        /* white */
      --soft: #e5e7eb;         /* gray-200 */
      --muted: #475569;        /* slate-600 */
      --text: #0f172a;         /* slate-900 */
      --brand: #0891b2;        /* cyan-700 */
      --brand-2: #6d28d9;      /* violet-700 */
      --ok: #047857;           /* green-700 */
      --warn: #b45309;         /* amber-700 */
      --danger: #be123c;       /* rose-700 */
    }

    * { box-sizing: border-box; }
    html, body { height: 100%; }
    body {
      margin: 0; font-family: ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial;
      background: radial-gradient(1000px 600px at 80% -10%, rgba(34,211,238,.12), transparent 60%),
                  radial-gradient(800px 500px at -10% 0%, rgba(167,139,250,.12), transparent 60%), var(--bg);
      color: var(--text);
      line-height: 1.5;
    }

    header {
      position: sticky; top: 0; z-index: 10; backdrop-filter: saturate(140%) blur(12px);
      background: linear-gradient(180deg, rgba(15,23,42,.85), rgba(15,23,42,.6));
      border-bottom: 1px solid rgba(148,163,184,.15);
    }
    .wrap { max-width: 1100px; margin: 0 auto; padding: 18px 18px; }
    .brand { display: flex; align-items: center; gap: 12px; font-weight: 800; letter-spacing:.3px; }
    .brand svg { width: 30px; height: 30px; }
    .sub { color: var(--muted); font-size: 13px; margin-top: -6px; }

    .grid {
      display: grid; grid-template-columns: repeat(12, 1fr); gap: 16px; align-items: stretch;
    }
    .card {
      background: linear-gradient(180deg, rgba(255,255,255,.02), rgba(255,255,255,.008));
      border: 1px solid rgba(148,163,184,.15);
      border-radius: var(--radius);
      box-shadow: var(--shadow); padding: 16px; min-height: 120px;
    }
    .card h3 { margin: 0 0 10px; font-size: 18px; letter-spacing:.2px; }
    .muted { color: var(--muted); font-size: 14px; }

    .pillbar { display:flex; gap:8px; flex-wrap: wrap; }
    .pill { padding: 8px 12px; border-radius: 999px; border:1px solid rgba(148,163,184,.2); cursor:pointer; }
    .pill.active { background: linear-gradient(90deg, var(--brand), var(--brand-2)); color: white; border-color: transparent; }

    .toolbar { display:flex; gap:8px; align-items:center; flex-wrap: wrap; }
    .btn { padding: 10px 14px; border-radius: 12px; border:1px solid rgba(148,163,184,.25); background: transparent; color: var(--text); cursor:pointer; }
    .btn.primary { background: linear-gradient(90deg, var(--brand), var(--brand-2)); border-color: transparent; color:white; }
    .btn.danger { border-color: rgba(251,113,133,.4); }

    input, select, textarea { width: 100%; padding: 12px 12px; border-radius: 12px; border:1px solid rgba(148,163,184,.25); background: var(--panel); color: var(--text); }
    textarea { min-height: 120px; resize: vertical; }
    label { font-size: 13px; color: var(--muted); display:block; margin-bottom: 6px; }
    .row { display:grid; grid-template-columns: repeat(12,1fr); gap:12px; }
    .col-6 { grid-column: span 6; }
    .col-4 { grid-column: span 4; }
    .col-8 { grid-column: span 8; }
    .col-12 { grid-column: span 12; }

    nav { display:flex; gap:8px; flex-wrap: wrap; }
    nav .tab { padding: 10px 14px; border-radius: 12px; border:1px solid rgba(148,163,184,.25); cursor:pointer; }
    nav .tab.active { background: linear-gradient(90deg, var(--brand), var(--brand-2)); color:white; border-color: transparent; }

    .stat { display:flex; align-items:center; justify-content: space-between; padding: 10px 12px; border-radius: 12px; background: rgba(148,163,184,.08); border:1px solid rgba(148,163,184,.15); }

    .footer { color: var(--muted); font-size: 12px; text-align:center; padding: 24px 0 40px; }

    .switch { position: relative; width: 56px; height: 32px; background: rgba(148,163,184,.25); border-radius: 999px; cursor: pointer; border:1px solid rgba(148,163,184,.2); }
    .switch .dot { position:absolute; top:3px; left:3px; width:26px; height:26px; border-radius:50%; background:white; transition: transform .2s ease; }
    .switch.on { background: linear-gradient(90deg, var(--brand), var(--brand-2)); }
    .switch.on .dot { transform: translateX(24px); }

    .badge { font-size: 12px; padding: 4px 8px; border-radius: 999px; border:1px solid rgba(148,163,184,.25); color: var(--muted); }

    /* responsive */
    @media (max-width: 860px) {
      .grid { grid-template-columns: repeat(6, 1fr); }
      .col-6 { grid-column: span 6; }
      .col-8 { grid-column: span 6; }
      .col-4 { grid-column: span 6; }
    }
  </style>
</head>
<body>
  <header>
    <div class="wrap" style="display:flex; align-items:center; justify-content: space-between; gap:14px;">
      <div class="brand">
        <svg viewBox="0 0 200 200" fill="none" xmlns="http://www.w3.org/2000/svg" aria-hidden="true">
          <defs>
            <linearGradient id="g" x1="0" y1="0" x2="1" y2="1">
              <stop offset="0%" stop-color="#22d3ee"/>
              <stop offset="100%" stop-color="#a78bfa"/>
            </linearGradient>
          </defs>
          <path d="M100 20c44 0 80 36 80 80s-36 80-80 80S20 144 20 100 56 20 100 20Z" stroke="url(#g)" stroke-width="10"/>
          <path d="M60 110c8 18 34 30 40 30 6 0 39-14 40-50 0-20-13-33-31-33s-23 13-23 13-6-8-18-8-22 8-22 25c0 9 4 16 14 23Z" fill="url(#g)"/>
        </svg>
        <div>
          <div style="font-size:18px">CareCompass</div>
          <div class="sub">Wellness • Medication • Safety • Community</div>
        </div>
      </div>
      <div class="toolbar">
        <span class="badge" id="privacyBadge">Privacy: On-Device</span>
        <button class="btn" id="themeBtn" title="Toggle light/dark">Toggle Theme</button>
        <div style="display:flex; align-items:center; gap:8px;">
          <span class="muted" style="font-size:12px;">High Contrast</span>
          <div class="switch" id="contrastSwitch" role="switch" aria-checked="false"><div class="dot"></div></div>
        </div>
        <div style="display:flex; align-items:center; gap:8px;">
          <span class="muted" style="font-size:12px;">Privacy Mode</span>
          <div class="switch" id="privacySwitch" role="switch" aria-checked="false"><div class="dot"></div></div>
        </div>
      </div>
    </div>
  </header>

  <main class="wrap" id="app" aria-live="polite">
    <nav style="margin: 6px 0 14px;">
      <button class="tab active" data-tab="home">Home</button>
      <button class="tab" data-tab="mood">Mood</button>
      <button class="tab" data-tab="meds">Meds</button>
      <button class="tab" data-tab="journal">Journal</button>
      <button class="tab" data-tab="sos">SOS</button>
      <button class="tab" data-tab="resources">Resources</button>
      <button class="tab" data-tab="settings">Settings</button>
    </nav>

    <!-- HOME -->
    <section id="home" class="tabview" style="display:block;">
      <div class="grid">
        <div class="card col-8">
          <h3>Welcome back <span id="nameSpot"></span> 👋</h3>
          <p class="muted">Your daily snapshot combines mood, medication adherence, and quick wins.
          Everything is private and stored only on your device.</p>
          <div class="row" style="margin-top:12px;">
            <div class="col-4">
              <div class="stat">
                <div>
                  <div class="muted" style="font-size:12px;">Today’s Mood</div>
                  <div id="homeMood" style="font-size:22px; font-weight:700;">—</div>
                </div>
                <div aria-hidden="true">😊</div>
              </div>
            </div>
            <div class="col-4">
              <div class="stat">
                <div>
                  <div class="muted" style="font-size:12px;">Meds Taken</div>
                  <div id="homeMeds" style="font-size:22px; font-weight:700;">0%</div>
                </div>
                <div aria-hidden="true">💊</div>
              </div>
            </div>
            <div class="col-4">
              <div class="stat">
                <div>
                  <div class="muted" style="font-size:12px;">Streak</div>
                  <div id="homeStreak" style="font-size:22px; font-weight:700;">0 days</div>
                </div>
                <div aria-hidden="true">🔥</div>
              </div>
            </div>
          </div>
          <canvas id="moodChart" width="900" height="220" style="margin-top:14px; width:100%; background: rgba(148,163,184,.08); border:1px solid rgba(148,163,184,.15); border-radius: 12px;"></canvas>
        </div>
        <div class="card col-4">
          <h3>Quick Actions</h3>
          <div class="pillbar" style="margin-bottom:10px;">
            <button class="pill" onclick="quickLogMood(4)">Log Mood 😊</button>
            <button class="pill" onclick="quickLogMood(2)">Log Mood 😕</button>
            <button class="pill" onclick="markAllMedsTaken()">Mark Meds Taken</button>
            <button class="pill" onclick="newJournalPrompt()">Journal Prompt</button>
          </div>
          <div class="pillbar">
            <button class="pill" onclick="navigate('sos')">Open SOS</button>
            <button class="pill" onclick="exportData()">Export Data</button>
            <label class="pill" style="cursor:pointer;">
              Import Data<input type="file" accept="application/json" onchange="importData(event)" style="display:none;" />
            </label>
          </div>
        </div>
      </div>
    </section>

    <!-- MOOD -->
    <section id="mood" class="tabview" style="display:none;">
      <div class="grid">
        <div class="card col-6">
          <h3>Daily Mood Check-in</h3>
          <label>Your mood (1–5)</label>
          <div class="pillbar" role="group" aria-label="mood buttons">
            <button class="pill" onclick="setMood(1)">1 😣</button>
            <button class="pill" onclick="setMood(2)">2 😕</button>
            <button class="pill" onclick="setMood(3)">3 😐</button>
            <button class="pill" onclick="setMood(4)">4 🙂</button>
            <button class="pill" onclick="setMood(5)">5 😄</button>
          </div>
          <label style="margin-top:10px;">Notes (optional)</label>
          <textarea id="moodNotes" placeholder="What influenced your mood today?"></textarea>
          <div style="display:flex; gap:8px; margin-top:10px;">
            <button class="btn primary" onclick="saveMood()">Save Mood</button>
            <button class="btn" onclick="clearTodayMood()">Clear Today</button>
          </div>
        </div>
        <div class="card col-6">
          <h3>Insights</h3>
          <p id="moodAdvice" class="muted">Log a few days to unlock personalized suggestions based on PHQ‑2 style screening questions.</p>
          <div class="row">
            <div class="col-12">
              <div class="stat"><span>14‑day Average</span><strong id="avg14">—</strong></div>
            </div>
            <div class="col-12">
              <div class="stat"><span>Low Mood Days (≤2)</span><strong id="lowDays">—</strong></div>
            </div>
          </div>
        </div>
        <div class="card col-12">
          <h3>Mood Trend (Last 14 Days)</h3>
          <canvas id="moodChart2" width="1000" height="260" style="width:100%; background: rgba(148,163,184,.08); border:1px solid rgba(148,163,184,.15); border-radius: 12px;"></canvas>
        </div>
      </div>
    </section>

    <!-- MEDS -->
    <section id="meds" class="tabview" style="display:none;">
      <div class="grid">
        <div class="card col-6">
          <h3>Add Medication</h3>
          <div class="row">
            <div class="col-6">
              <label>Name</label>
              <input id="medName" placeholder="e.g., Sertraline" />
            </div>
            <div class="col-6">
              <label>Dose</label>
              <input id="medDose" placeholder="e.g., 50 mg" />
            </div>
            <div class="col-6">
              <label>Times per Day</label>
              <select id="medTimes">
                <option>1</option><option>2</option><option>3</option><option>4</option>
              </select>
            </div>
            <div class="col-6">
              <label>Time Window</label>
              <input id="medWhen" placeholder="e.g., 8am / 8pm" />
            </div>
            <div class="col-12">
              <button class="btn primary" onclick="addMed()">Add</button>
            </div>
          </div>
        </div>
        <div class="card col-6">
          <h3>Today’s Schedule</h3>
          <div id="medList" class="muted">No meds yet.</div>
          <div style="margin-top:10px; display:flex; gap:8px;">
            <button class="btn" onclick="markAllMedsTaken()">Mark All Taken</button>
            <button class="btn danger" onclick="resetTodayMeds()">Reset Today</button>
          </div>
        </div>
        <div class="card col-12">
          <h3>Adherence</h3>
          <p class="muted">Track how consistently you take medications over time.</p>
          <canvas id="adherenceChart" width="1000" height="220" style="width:100%; background: rgba(148,163,184,.08); border:1px solid rgba(148,163,184,.15); border-radius: 12px;"></canvas>
        </div>
      </div>
    </section>

    <!-- JOURNAL -->
    <section id="journal" class="tabview" style="display:none;">
      <div class="grid">
        <div class="card col-8">
          <h3>Reflect & Grow</h3>
          <label>Prompt</label>
          <div style="display:flex; gap:8px; align-items:center;">
            <input id="journalPrompt" readonly />
            <button class="btn" onclick="newJournalPrompt()">New Prompt</button>
          </div>
          <label style="margin-top:10px;">Your Entry</label>
          <textarea id="journalText" placeholder="Write freely. This stays on your device."></textarea>
          <div style="display:flex; gap:8px; margin-top:10px;">
            <button class="btn primary" onclick="saveJournal()">Save Entry</button>
            <button class="btn" onclick="clearJournal()">Clear</button>
          </div>
        </div>
        <div class="card col-4">
          <h3>Entries</h3>
          <div id="journalList" class="muted">No entries yet.</div>
        </div>
      </div>
    </section>

    <!-- SOS -->
    <section id="sos" class="tabview" style="display:none;">
      <div class="grid">
        <div class="card col-6" style="border-left: 6px solid var(--danger);">
          <h3>Emergency Contacts</h3>
          <div id="sosList" class="pillbar" style="margin-bottom:10px;"></div>
          <div class="row">
            <div class="col-6"><label>Name</label><input id="sosName" placeholder="e.g., Mom"/></div>
            <div class="col-6"><label>Phone</label><input id="sosPhone" placeholder="e.g., +1 555‑123‑4567"/></div>
            <div class="col-12"><button class="btn primary" onclick="addSOS()">Add Contact</button></div>
          </div>
          <p class="muted" style="margin-top:10px;">Tap a contact to call or long‑press to remove.</p>
        </div>
        <div class="card col-6">
          <h3>Hotlines & Help</h3>
          <ul>
            <li><strong>988 Suicide & Crisis Lifeline:</strong> <a href="tel:988">Call 988</a></li>
            <li><strong>Emergency:</strong> <a href="tel:911">Call 911</a></li>
            <li><strong>Crisis Text Line:</strong> Text <em>HOME</em> to <a href="sms:741741">741741</a></li>
            <li><strong>National Domestic Violence Hotline:</strong> <a href="tel:18007997233">1‑800‑799‑SAFE</a></li>
          </ul>
          <p class="muted">These links use your device’s dialer/text app.</p>
        </div>
      </div>
    </section>

    <!-- RESOURCES -->
    <section id="resources" class="tabview" style="display:none;">
      <div class="grid">
        <div class="card col-12">
          <h3>Community Resources</h3>
          <p class="muted">Find local help for food, housing, mental health, and clinics. (Sample dataset; you can edit or add your local resources.)</p>
          <div class="row" style="margin-top:8px;">
            <div class="col-6">
              <label>Filter by Type</label>
              <select id="resFilter" onchange="renderResources()">
                <option value="all">All</option>
                <option value="food">Food</option>
                <option value="housing">Housing</option>
                <option value="health">Health</option>
                <option value="mental">Mental Health</option>
                <option value="legal">Legal</option>
              </select>
            </div>
            <div class="col-6">
              <label>Add Resource (Name | Type | Phone/URL)</label>
              <input id="resAdd" placeholder="e.g., Food Bank | food | https://… or +1 555‑000‑0000" onkeydown="if(event.key==='Enter') addResource()" />
            </div>
            <div class="col-12">
              <button class="btn" onclick="addResource()">Add</button>
              <button class="btn danger" onclick="resetResources()">Reset to Defaults</button>
            </div>
          </div>
          <div id="resList" style="margin-top:12px; display:grid; grid-template-columns: repeat(auto-fill,minmax(260px,1fr)); gap:12px;"></div>
        </div>
      </div>
    </section>

    <!-- SETTINGS -->
    <section id="settings" class="tabview" style="display:none;">
      <div class="grid">
        <div class="card col-6">
          <h3>Profile</h3>
          <label>Your name</label>
          <input id="yourName" placeholder="Optional" />
          <div style="display:flex; gap:8px; margin-top:10px;">
            <button class="btn primary" onclick="saveName()">Save</button>
            <button class="btn danger" onclick="hardReset()">Erase All Data</button>
          </div>
          <p class="muted" style="margin-top:10px;">CareCompass stores all data in your browser’s local storage. Export regularly if needed.</p>
        </div>
        <div class="card col-6">
          <h3>Accessibility</h3>
          <label>Base Font Size</label>
          <input id="fontSlider" type="range" min="14" max="22" value="16" oninput="updateFontSize(this.value)" />
          <div class="muted">Current: <span id="fontSizeVal">16</span>px</div>
          <div style="margin-top:10px;">
            <button class="btn" onclick="toggleReducedMotion()" id="motionBtn">Reduce Motion: Off</button>
          </div>
        </div>
      </div>
    </section>

    <div class="footer">Built with ❤️ for community impact. Privacy-first. No cloud required.</div>
  </main>

  <dialog id="welcome">
    <form method="dialog" style="margin:0;">
      <div class="card" style="background: var(--panel); width:min(640px, 92vw);">
        <h3>Welcome to CareCompass</h3>
        <p class="muted">Track mood, meds, journal privately, and get quick access to help. Everything stays on this device. You can export data anytime.</p>
        <label>Your name (optional)</label>
        <input id="welcomeName" placeholder="Helps personalize insights"/>
        <div style="display:flex; gap:8px; margin-top:10px; justify-content:flex-end;">
          <button class="btn" value="cancel">Skip</button>
          <button class="btn primary" value="ok" onclick="saveWelcomeName()">Let’s Go</button>
        </div>
      </div>
    </form>
  </dialog>

  <script>
    const $ = (q) => document.querySelector(q);
    const $$ = (q) => Array.from(document.querySelectorAll(q));
    const store = {
      get k(){ return JSON.parse(localStorage.getItem('carecompass') || '{}'); },
      set k(v){ localStorage.setItem('carecompass', JSON.stringify(v)); },
      read(path, fallback){ const k=this.k; return path.split('.').reduce((a,c)=> (a&&a[c]!==undefined)?a[c]:fallback, k); },
      write(path, value){ const k=this.k; const parts=path.split('.'); let cur=k; parts.forEach((p,i)=>{ if(i===parts.length-1){ cur[p]=value; } else { cur[p]=cur[p]||{}; cur=cur[p]; } }); this.k=k; },
    };

    const state = {
      theme: localStorage.getItem('cc_theme') || 'dark',
      highContrast: localStorage.getItem('cc_contrast') === '1',
      privacyMask: localStorage.getItem('cc_privacy') === '1',
      reducedMotion: localStorage.getItem('cc_motion') === '1',
      baseFont: parseInt(localStorage.getItem('cc_font')||'16',10),
    };

    // THEME + ACCESSIBILITY
    function applyTheme(){
      document.documentElement.dataset.theme = state.theme === 'light' ? 'light' : '';
      $('#themeBtn').textContent = `Theme: ${state.theme==='light'?'Light':'Dark'}`;
    }
    function toggleTheme(){ state.theme = state.theme==='light'?'dark':'light'; localStorage.setItem('cc_theme', state.theme); applyTheme(); }
    $('#themeBtn').addEventListener('click', toggleTheme);

    function applyContrast(){
      const on = state.highContrast;
      $('#contrastSwitch').classList.toggle('on', on);
      $('#contrastSwitch').setAttribute('aria-checked', on? 'true':'false');
      document.body.style.filter = on ? 'contrast(1.15) saturate(1.1)' : 'none';
    }
    $('#contrastSwitch').addEventListener('click', ()=>{ state.highContrast=!state.highContrast; localStorage.setItem('cc_contrast', state.highContrast?'1':'0'); applyContrast(); });

    function applyPrivacy(){
      $('#privacySwitch').classList.toggle('on', state.privacyMask);
      $('#privacySwitch').setAttribute('aria-checked', state.privacyMask?'true':'false');
      document.querySelectorAll('[data-priv]').forEach(el=>{
        el.textContent = state.privacyMask? '••••••' : el.dataset.priv;
      });
    }
    $('#privacySwitch').addEventListener('click', ()=>{ state.privacyMask=!state.privacyMask; localStorage.setItem('cc_privacy', state.privacyMask?'1':'0'); applyPrivacy(); });

    function updateFontSize(px){
      document.documentElement.style.fontSize = px+'px';
      $('#fontSizeVal').textContent = px;
      localStorage.setItem('cc_font', px);
    }
    function toggleReducedMotion(){ state.reducedMotion=!state.reducedMotion; localStorage.setItem('cc_motion', state.reducedMotion?'1':'0'); $('#motionBtn').textContent = `Reduce Motion: ${state.reducedMotion?'On':'Off'}`; document.documentElement.style.scrollBehavior = state.reducedMotion?'auto':'smooth'; }

    // NAV
    function navigate(id){
      $$('.tab').forEach(b=> b.classList.toggle('active', b.dataset.tab===id));
      $$('.tabview').forEach(v=> v.style.display = v.id===id? 'block':'none');
      if(id==='home') drawMoodChart();
      if(id==='mood') drawMoodChart2();
      if(id==='meds') drawAdherence();
      window.scrollTo({ top: 0 });
    }
    $$('.tab').forEach(b=> b.addEventListener('click', ()=> navigate(b.dataset.tab)) );

    // NAME
    function saveName(){
      const name=$('#yourName').value.trim();
      store.write('profile.name', name);
      renderName();
    }
    function renderName(){
      const name = store.read('profile.name','');
      $('#nameSpot').textContent = name? name : '';
      $('#yourName').value = name;
    }

    // WELCOME
    function saveWelcomeName(){
      const n=$('#welcomeName').value.trim(); if(n) store.write('profile.name', n);
      $('#welcome').close(); renderName();
    }

    // MOOD
    function todayKey(){ const d=new Date(); return d.toISOString().slice(0,10); }
    function setMood(v){ store.write(`mood.${todayKey()}.score`, v); renderHome(); drawMoodChart(); drawMoodChart2(); suggestMoodAdvice(); }
    function saveMood(){ const notes=$('#moodNotes').value.trim(); if(notes) store.write(`mood.${todayKey()}.notes`, notes); renderHome(); suggestMoodAdvice(); listJournal(); alert('Saved!'); }
    function clearTodayMood(){ const k=store.k; if(k.mood) { delete k.mood[todayKey()]; store.k=k; } $('#moodNotes').value=''; renderHome(); drawMoodChart(); drawMoodChart2(); suggestMoodAdvice(); }
    function getMoodArray(days=14){
      const arr=[]; for(let i=days-1;i>=0;i--){ const d=new Date(); d.setDate(d.getDate()-i); const key=d.toISOString().slice(0,10); const s=store.read(`mood.${key}.score`, null); arr.push({ key, v: s }); }
      return arr;
    }
    function avgMood14(){ const a=getMoodArray(14).map(x=>x.v).filter(v=>typeof v==='number'); if(!a.length) return null; return (a.reduce((p,c)=>p+c,0)/a.length).toFixed(2); }
    function lowMoodDays(){ return getMoodArray(14).filter(x=> (x.v||0) <=2).length; }
    function quickLogMood(v){ setMood(v); navigate('home'); }

    function suggestMoodAdvice(){
      const avg = avgMood14();
      let msg = 'Log a few days to unlock personalized suggestions based on PHQ‑2 style screening questions.';
      if(avg){
        if(avg <= 2.2) msg = 'Noticing many low-mood days. Consider short daily walks, sleep hygiene, and talking to someone you trust. If you need help now, tap SOS.';
        else if(avg <=3.5) msg = 'Mood is mixed. Try a 2‑minute breathing break and plan one small win for tomorrow.';
        else msg = 'Great trend! Keep your routine and celebrate small wins. Reflect in your journal to sustain momentum.';
      }
      $('#moodAdvice').textContent = msg;
      $('#avg14').textContent = avg? avg : '—';
      $('#lowDays').textContent = getMoodArray(14).filter(x=> (x.v||0) <=2).length;
    }

    // MEDS
    function addMed(){
      const name=$('#medName').value.trim(); const dose=$('#medDose').value.trim(); const times=parseInt($('#medTimes').value,10); const when=$('#medWhen').value.trim();
      if(!name) return alert('Enter a medication name.');
      const meds = store.read('meds', []);
      meds.push({ id: crypto.randomUUID(), name, dose, times, when, history:{} });
      store.write('meds', meds);
      $('#medName').value=''; $('#medDose').value=''; $('#medWhen').value='';
      renderMeds();
    }
    function medTakenToggle(id){
      const meds = store.read('meds', []);
      const m = meds.find(x=>x.id===id); if(!m) return;
      const key=todayKey(); m.history[key] = !m.history[key];
      store.write('meds', meds); renderMeds(); renderHome(); drawAdherence();
    }
    function markAllMedsTaken(){ const meds=store.read('meds',[]); const key=todayKey(); meds.forEach(m=>{ m.history[key]=true; }); store.write('meds', meds); renderMeds(); renderHome(); drawAdherence(); }
    function resetTodayMeds(){ const meds=store.read('meds',[]); const key=todayKey(); meds.forEach(m=>{ delete m.history[key]; }); store.write('meds', meds); renderMeds(); renderHome(); drawAdherence(); }
    function adherenceLast(days=14){
      const meds=store.read('meds',[]); const out=[]; for(let i=days-1;i>=0;i--){ const d=new Date(); d.setDate(d.getDate()-i); const key=d.toISOString().slice(0,10); const total = meds.reduce((p,m)=> p + (m.times||1), 0);
        const taken = meds.reduce((p,m)=> p + ((m.history[key])? (m.times||1):0), 0); out.push({ key, pct: total? Math.round((taken/total)*100): 0 }); }
      return out;
    }

    function renderMeds(){
      const meds=store.read('meds', []);
      if(!meds.length){ $('#medList').innerHTML='No meds yet.'; return; }
      const key=todayKey();
      $('#medList').innerHTML = meds.map(m=>{
        const checked = !!m.history[key];
        const pct = adherenceLast(7).slice(-1)[0]?.pct ?? 0;
        return `<div class="stat" style="gap:10px;">
          <div style="flex:1;">
            <div style="font-weight:700;">${m.name} <span class="muted" style="font-weight:400;">${m.dose? '• '+m.dose:''}</span></div>
            <div class="muted" style="font-size:12px;">${m.times||1}× / day • ${m.when||'—'}</div>
          </div>
          <button class="btn ${checked?'primary':''}" onclick="medTakenToggle('${m.id}')">${checked?'Taken ✓':'Mark Taken'}</button>
        </div>`;
      }).join('');
    }

    // JOURNAL
    const PROMPTS = [
      'What’s one small win today?',
      'What’s stressing me, and what’s in my control?',
      'Three things I’m grateful for…',
      'If I felt 10% better tomorrow, what would I do?',
      'Who can I text to connect today?',
      'What routine helps my mood most?',
      'What made me smile recently?',
    ];
    function newJournalPrompt(){ $('#journalPrompt').value = PROMPTS[Math.floor(Math.random()*PROMPTS.length)]; }
    function saveJournal(){ const text=$('#journalText').value.trim(); const prompt=$('#journalPrompt').value.trim(); if(!text){ alert('Write something first.'); return; } const entries=store.read('journal', []); entries.unshift({ id: crypto.randomUUID(), date: new Date().toISOString(), prompt, text }); store.write('journal', entries); $('#journalText').value=''; listJournal(); alert('Saved!'); }
    function clearJournal(){ $('#journalText').value=''; }
    function listJournal(){ const entries=store.read('journal', []); if(!entries.length){ $('#journalList').innerHTML='No entries yet.'; return; } $('#journalList').innerHTML = entries.map(e=>{
      const d=new Date(e.date).toLocaleString();
      const t = state.privacyMask? '••••••' : e.text.replace(/</g,'&lt;').slice(0,140)+(e.text.length>140?'…':'');
      return `<div class="stat" style="flex-direction:column; align-items:flex-start; gap:6px;">
        <div style="font-size:12px; color:var(--muted);">${d}</div>
        <div style="font-weight:600;">${e.prompt||''}</div>
        <div>${t}</div>
      </div>`; }).join(''); }

    // SOS
    function addSOS(){ const name=$('#sosName').value.trim(); const phone=$('#sosPhone').value.trim(); if(!name||!phone) return alert('Enter name and phone.'); const arr=store.read('sos', []); arr.push({ id: crypto.randomUUID(), name, phone }); store.write('sos', arr); $('#sosName').value=''; $('#sosPhone').value=''; renderSOS(); }
    function renderSOS(){ const arr=store.read('sos', []); const wrap=$('#sosList'); wrap.innerHTML = arr.map(c=>`<a class="pill" href="tel:${c.phone}" title="Call ${c.name}" oncontextmenu="event.preventDefault(); removeSOS('${c.id}')">${c.name}</a>`).join(''); }
    function removeSOS(id){ const arr=store.read('sos', []); const out=arr.filter(x=>x.id!==id); store.write('sos', out); renderSOS(); }

    // RESOURCES
    const DEFAULT_RES = [
      { name:'Food Bank (Wake County)', type:'food', link:'+1 919‑555‑1111' },
      { name:'Community Clinic', type:'health', link:'+1 919‑555‑2222' },
      { name:'Crisis Center', type:'mental', link:'+1 919‑555‑3333' },
      { name:'Legal Aid NC', type:'legal', link:'+1 866‑219‑5262' },
      { name:'Shelter Hotline', type:'housing', link:'+1 919‑555‑4444' },
    ];
    function ensureResources(){ if(!store.read('resources')) store.write('resources', DEFAULT_RES); }
    function addResource(){ const v=$('#resAdd').value.trim(); if(!v) return; const [name,type,link] = v.split('|').map(s=> s? s.trim(): ''); if(!name||!type||!link) return alert('Use: Name | Type | Phone/URL'); const r=store.read('resources', []); r.push({ name, type: type.toLowerCase(), link }); store.write('resources', r); $('#resAdd').value=''; renderResources(); }
    function resetResources(){ if(confirm('Reset resources to defaults?')) { store.write('resources', DEFAULT_RES); renderResources(); } }
    function renderResources(){ const typ=$('#resFilter').value; const r=store.read('resources', []); const list = r.filter(x=> typ==='all' ? true : x.type===typ); $('#resList').innerHTML = list.map(x=>`<div class="card" style="min-height:auto;">
        <div style="display:flex; justify-content:space-between; align-items:center; gap:8px;">
          <div>
            <div style="font-weight:700;">${x.name}</div>
            <div class="muted" style="font-size:12px; text-transform:capitalize;">${x.type}</div>
          </div>
          <a class="btn" href="${x.link.startsWith('http')? x.link : 'tel:'+x.link}" target="_blank">Contact</a>
        </div>
      </div>`).join(''); }

    // EXPORT / IMPORT
    function exportData(){ const data = store.k; const blob = new Blob([JSON.stringify(data,null,2)], {type:'application/json'}); const url = URL.createObjectURL(blob); const a=document.createElement('a'); a.href=url; a.download='carecompass_export_'+todayKey()+'.json'; a.click(); URL.revokeObjectURL(url); }
    function importData(evt){ const f=evt.target.files[0]; if(!f) return; const reader=new FileReader(); reader.onload=()=>{ try{ const obj=JSON.parse(reader.result); if(!obj||typeof obj!=='object') throw new Error('Invalid file'); store.k=obj; init(); alert('Import successful!'); }catch(e){ alert('Import failed: '+e.message); } }; reader.readAsText(f); }

    // CHARTS (vanilla canvas)
    function drawLine(canvasId, points, {yMax=5, colorGrad=['#22d3ee','#a78bfa']}={}){
      const c = document.getElementById(canvasId); if(!c) return; const ctx=c.getContext('2d'); const W=c.width, H=c.height; ctx.clearRect(0,0,W,H);
      // bg grid
      ctx.strokeStyle='rgba(148,163,184,.15)'; ctx.lineWidth=1; for(let i=1;i<5;i++){ const y=H - (i*(H/5)); ctx.beginPath(); ctx.moveTo(40,y); ctx.lineTo(W-10,y); ctx.stroke(); }
      // axes
      ctx.strokeStyle='rgba(148,163,184,.35)'; ctx.beginPath(); ctx.moveTo(40,10); ctx.lineTo(40,H-20); ctx.lineTo(W-10,H-20); ctx.stroke();
      // gradient
      const grad = ctx.createLinearGradient(0,0,W,0); grad.addColorStop(0,colorGrad[0]); grad.addColorStop(1,colorGrad[1]);
      // line
      ctx.strokeStyle=grad; ctx.lineWidth=3; ctx.beginPath();
      points.forEach((p,i)=>{ const x = 40 + i*((W-60)/Math.max(1,points.length-1)); const y = 10 + (1-(p.v||0)/yMax)*(H-30); if(i===0) ctx.moveTo(x,y); else ctx.lineTo(x,y); });
      ctx.stroke();
      // dots
      ctx.fillStyle=grad; points.forEach((p,i)=>{ const x=40 + i*((W-60)/Math.max(1,points.length-1)); const y=10 + (1-(p.v||0)/yMax)*(H-30); ctx.beginPath(); ctx.arc(x,y,3,0,Math.PI*2); ctx.fill(); });
    }

    function drawMoodChart(){ const arr=getMoodArray(14).map(x=> ({ v: (x.v||0) })); drawLine('moodChart', arr, { yMax:5 }); $('#homeMood').textContent = (store.read(`mood.${todayKey()}.score`, null)??'—'); updateHomeMedsAndStreak(); }
    function drawMoodChart2(){ const arr=getMoodArray(14).map(x=> ({ v: (x.v||0) })); drawLine('moodChart2', arr, { yMax:5 }); suggestMoodAdvice(); }

    function updateHomeMedsAndStreak(){
      const meds=store.read('meds',[]); const key=todayKey(); const total=meds.reduce((p,m)=> p+(m.times||1),0); const taken=meds.reduce((p,m)=> p+((m.history[key])?(m.times||1):0),0); const pct= total? Math.round((taken/total)*100):0; $('#homeMeds').textContent = pct+'%';
      // streak = consecutive days with any mood logged
      let streak=0; for(let i=0;i<90;i++){ const d=new Date(); d.setDate(d.getDate()-i); const k=d.toISOString().slice(0,10); const v=store.read(`mood.${k}.score`, null); if(v){ streak++; } else break; }
      $('#homeStreak').textContent = streak + ' day' + (streak===1?'':'s');
    }

    function drawAdherence(){ const arr=adherenceLast(14).map(x=> ({ v:x.pct/20 })); // scale to 0-5
      drawLine('adherenceChart', arr, { yMax:5, colorGrad:['#34d399','#22d3ee'] }); }

    function renderHome(){ renderName(); updateHomeMedsAndStreak(); }

    // INIT
    function init(){
      applyTheme(); applyContrast(); applyPrivacy(); updateFontSize(state.baseFont); $('#fontSlider').value=state.baseFont; $('#motionBtn').textContent = `Reduce Motion: ${state.reducedMotion?'On':'Off'}`; document.documentElement.style.scrollBehavior = state.reducedMotion?'auto':'smooth';
      ensureResources(); renderResources(); renderMeds(); listJournal(); renderSOS(); newJournalPrompt(); renderHome(); drawMoodChart(); drawMoodChart2();
      // onboarding
      if(!store.read('profile')){ $('#welcome').showModal(); }
      // name spots
      renderName();
    }

    // PRIVACY MASK BINDING EXAMPLE (name on home)
    function bindPrivacy(){ const name=store.read('profile.name',''); const spot=$('#nameSpot'); spot.dataset.priv=name || ''; if(state.privacyMask) spot.textContent=''; }

    // observe profile changes
    const observer = new MutationObserver(bindPrivacy);
    observer.observe(document.body,{ childList:true, subtree:true });

    // Expose some for quick actions
    window.navigate = navigate;
    window.quickLogMood = quickLogMood;
    window.markAllMedsTaken = markAllMedsTaken;
    window.newJournalPrompt = newJournalPrompt;
    window.exportData = exportData;
    window.importData = importData;

    // Start
    init();
    bindPrivacy();
  </script>
</body>
</html>
